import asyncio
import logging
from pathlib import Path

from langgraph.checkpoint.mongodb import MongoDBSaver
from pymongo import MongoClient
from telegram import Update
from telegram.ext import Application, CallbackContext, CommandHandler, MessageHandler, filters

from slava.config import MONGO_HOST, MONGO_PASSWORD, MONGO_PORT, MONGO_USERNAME, TOKEN, model_name
from slava.modules.agent.assistant_graph import AGORAAssistant

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

from slava.modules.agent.handler import AGORAHandler, AGORAOptions


def agora_handler() -> AGORAHandler:
    options = AGORAOptions(
        model_name=model_name,
        psycopg_checkpointer=f"mongodb://{MONGO_USERNAME}:{MONGO_PASSWORD}@{MONGO_HOST}:{MONGO_PORT}/",
    )
    handler = AGORAHandler(options)
    return handler


handler = agora_handler()


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    logging.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id} –≤ –≥—Ä—É–ø–ø–µ {update.effective_chat.id}"
    )
    await update.message.reply_text(
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ **Agora**! üöÄ

        ### üåü –ß—Ç–æ —É–º–µ–µ—Ç Agora:
        1. **–û–¶–ï–ù–ö–ê –° –ü–û–ú–û–©–¨–Æ –ë–ï–ù–ß–ú–ê–†–ö–ê** üß™  
        - Agora –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å **–≥–ª—É–±–æ–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π LLM** –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤.  
        - üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**, –≤—ã—è–≤–ª—è–µ—Ç —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–¥–µ–ª–∏.  
        - üí° **–î–∞–µ—Ç —Å–æ–≤–µ—Ç—ã** –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏: –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

        2. **–°–û–ó–î–ê–ù–ò–ï –ë–ï–ù–ß–ú–ê–†–ö–û–í –° –ù–£–õ–Ø** ‚úçÔ∏è  
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç **–∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã** –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. üìÇ  
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∑–∞–¥–∞—á, –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏ —Ü–µ–ª–∏, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∫–∞ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–π.

        3. **–ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –í –ò–ù–¢–ï–†–ù–ï–¢–ï** üåê  
        - –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤.  
        - ‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.

        ### üõ†Ô∏è –î–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç Agora?
        - –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ LLM.  
        - –î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω **—Ç–æ—á–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫**.  
        - –î–ª—è –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –∏—Ö LLM –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Agora, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à—É LLM –Ω–∞ **–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!** ‚ú®
        """,
        parse_mode="Markdown",
    )


async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    user_id = update.message.from_user.id
    user_input = update.message.text
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {update.effective_chat.id}: {user_input}")

    processing_message = await update.message.reply_text("–ñ–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

    result, response = await handler.ahandle_prompt(user_input, user_id)

    processing_message = await update.message.reply_text("–ñ–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")

    await processing_message.delete()

    await update.message.reply_text(
        result,
        parse_mode="Markdown",
    )


async def handle_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"""
    user_id = update.message.from_user.id
    file = update.message.document

    logging.info(f"–§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file.file_name}")

    if file.mime_type != "application/pdf":
        await update.message.reply_text("–ü–æ–∫–∞ —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.")
        return

    file_path = Path(f"downloads/{file.file_name}")
    file_path.parent.mkdir(parents=True, exist_ok=True)

    file_object = await file.get_file()
    await file_object.download_to_drive(custom_path=str(file_path))
    logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")

    processing_message = await update.message.reply_text("–ñ–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")

    result, response = await handler.ahandle_prompt(str(file_path), user_id)

    logging.info(f"–û—Ç–≤–µ—Ç: {response}, {result}")

    await processing_message.delete()
    await update.message.reply_text(
        result,
        parse_mode="Markdown",
    )


async def run_bot():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file))

    await application.initialize()
    await application.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.")
    asyncio.create_task(application.updater.start_polling())
    logging.info("Polling –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            logging.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞.")
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            logging.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π.")
            loop.run_until_complete(run_bot())
    except RuntimeError as e:
        if str(e) == "This event loop is already running":
            logging.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞.")
            loop = asyncio.get_running_loop()
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            raise
